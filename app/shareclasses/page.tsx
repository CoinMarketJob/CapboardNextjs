'use client'
import Head from 'next/head';
import { useState, useEffect } from 'react';
import styles from './share.module.css';

type ShareClass = {
  name: string;
  nominalPrice: number;
  votingRights: boolean;
  dividendRights: boolean;
  liquidationPreference: boolean;
  antiDilution: boolean;
  hurdle: boolean;
  note: string;
};

export default function Home() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isNotesOpen, setIsNotesOpen] = useState(false);
  const [name, setName] = useState("");
  const [nominalPrice, setNominalPrice] = useState("");
  const [note, setNote] = useState("");
  const [shareClasses, setShareClasses] = useState<ShareClass[]>([]);
  const [votingRights, setVotingRights] = useState(false);
  const [dividendRights, setDividendRights] = useState(false);
  const [liquidationPreference, setLiquidationPreference] = useState(false);
  const [antiDilution, setAntiDilution] = useState(false);
  const [hurdle, setHurdle] = useState(false);

  const openModal = () => {
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  const toggleNotes = () => {
    setIsNotesOpen(!isNotesOpen);
  };

  const Save = () => {
    async function saveShareClasses() {
      const submitData: ShareClass = {
        name,
        nominalPrice: parseFloat(nominalPrice),
        note,
        votingRights,
        dividendRights,
        liquidationPreference,
        antiDilution,
        hurdle
      };
      console.log(submitData);
      try {
        const response = await fetch('/api/shareclasses', {
          method: 'POST',
          body: JSON.stringify(submitData),
          headers: {
            'Content-Type': 'application/json'
          }
        });
        console.log(response);

        if (response.ok) {
          window.location.href = "/shareclasses";
        } else {
          console.log("Failed");
        }
      } catch (error) {
        console.log(error);
      }
    }
    saveShareClasses();
  };

  useEffect(() => {
    async function fetchData() {
      try {
        const response = await fetch('/api/shareclasses/get');
        const data: ShareClass[] = await response.json();
        setShareClasses(data);
        console.log(data);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    }
    fetchData();
  }, []);

  const Delete = (id: number) => {
    async function deleteShareClasses(id: number) {
        try {
            const response = await fetch(`/api/shareclasses/${id}`, {
                method: 'DELETE',
            });

            if (response.ok) {
                window.location.href = "/shareclasses";
            } else {
                console.error('Silme hatasƒ±:', response.statusText);
            }
        } catch (error) {
            console.error('Hata:', error);
        }
    }

    deleteShareClasses(id);
};

  return (
    <div className={styles.container}>
      <Head>
        <title>Share Classes Page</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className={styles.main}>
        <div className={styles.header}>
          <h1>Share Classes</h1>
          <button className={styles.addButton} onClick={openModal}>+ ADD SHARE CLASS</button>
        </div>

        <div className={styles.table}>
          <div className={`${styles.tableRow} ${styles.tableHeader}`}>
            <div className={styles.tableCell}>NAME</div>
            <div className={styles.tableCell}>RIGHTS</div>
            <div className={styles.tableCell}>SENIORITY</div>
            <div className={styles.tableCell}>NOTES</div>
            <div className={styles.tableCell}></div>
          </div>

          {shareClasses.map((item, index) => (
            <div key={index} className={styles.tableRow}>
              <div className={styles.tableCell}>{item.name}</div>
              <div className={styles.tableCell}>
                <div className={item.votingRights ? styles.checkmark : styles.crossmark}>{item.votingRights ? '‚úì voting' : '‚úó no voting'}</div>
                <div className={item.dividendRights ? styles.checkmark : styles.crossmark}>{item.dividendRights ? '‚úì dividend' : '‚úó no dividend'}</div>
                <div className={item.liquidationPreference ? styles.checkmark : styles.crossmark}>{item.liquidationPreference ? '‚úì liquidation preference' : '‚úó no liquidation preference'}</div>
                <div className={item.antiDilution ? styles.checkmark : styles.crossmark}>{item.antiDilution ? '‚úì anti-dilution' : '‚úó no anti-dilution'}</div>
                <div className={item.hurdle ? styles.checkmark : styles.crossmark}>{item.hurdle ? '‚úì hurdle' : '‚úó no hurdle'}</div>
              </div>
              <div className={styles.tableCell}>--</div>
              <div className={styles.tableCell}>--</div>
              <div className={styles.tableCell}>
                <button className={styles.iconButton}>‚úè</button>
                <button className={styles.iconButton} onClick={() => Delete(item.id)}>üóë</button>
              </div>
            </div>
          ))}
        </div>

        {isModalOpen && (
          <div className={styles.modalOverlay}>
            <div className={styles.modal}>
              <button className={styles.closeButton} onClick={closeModal}>√ó</button>
              <h3>Share class</h3>
              <form>
                <input
                  className={styles.input}
                  type="text"
                  placeholder="Name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                />
                <input
                  className={styles.input}
                  type="number"
                  placeholder="Nominal share price"
                  value={nominalPrice}
                  onChange={(e) => setNominalPrice(e.target.value)}
                />
                <div className={styles.checkboxContainer}>
                  <label><input type="checkbox" checked={votingRights} onChange={(e) => setVotingRights(e.target.checked)} /> Voting rights</label>
                  <label><input type="checkbox" checked={dividendRights} onChange={(e) => setDividendRights(e.target.checked)} /> Dividend rights</label>
                  <label><input type="checkbox" checked={liquidationPreference} onChange={(e) => setLiquidationPreference(e.target.checked)} /> Liquidation Preference</label>
                  <label><input type="checkbox" checked={antiDilution} onChange={(e) => setAntiDilution(e.target.checked)} /> Anti-dilution</label>
                  <label><input type="checkbox" checked={hurdle} onChange={(e) => setHurdle(e.target.checked)} /> Hurdle</label>
                </div>
                <div>
                  <button type="button" className={styles.notesToggle} onClick={toggleNotes}>
                    NOTES {isNotesOpen ? '‚ñ≤' : '‚ñº'}
                  </button>
                  {isNotesOpen && (
                    <textarea
                      className={styles.textarea}
                      value={note}
                      onChange={(e) => setNote(e.target.value)}
                      placeholder="Notes"
                    ></textarea>
                  )}
                </div>
                <div className={styles.buttonContainer}>
                  <button type="button" className={styles.button} onClick={closeModal}>CLOSE</button>
                  <button type="button" className={styles.button} onClick={Save}>SAVE</button>
                </div>
              </form>
            </div>
          </div>
        )}
      </main>
 ¬†¬†¬†</div>
¬†¬†);
}