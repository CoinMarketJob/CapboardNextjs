generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Stakeholders {
  id    Int     @id @default(autoincrement())
  type  Boolean 
  name  String?
  lastName  String?
  contactEmail String  @unique
  group  String?
  address  String?
  optionalLineOfAddress  String?
  postalCode  String?
  cityName  String?
  country  String?
  identifier String?
  customIdentifier String?
  phone String?
  birthdate  String?
  nationality  String?
  civilStatus  String?
  customDetail  String?
  notes  String?

  transactions Transaction[]
}

model User {
  id            Int    @id @default(autoincrement())
  name          String?
  email         String?   @unique
  hashedPassword String?
  createdAt     DateTime @default(now())
}
model ShareClasses {
  id                Int    @id @default(autoincrement())
  name              String
  nominalPrice      Float
  votingRights      Boolean @default(false)
  dividendRights    Boolean @default(false)
  antiDilition      String?
  taxValue          Int?
  hurdle            Int?
  issueCertificates Boolean @default(false)
  Note              String?

  pools Pool[]
}

model Transaction {
  id                    Int             @id @default(autoincrement())
  date                  DateTime        @default(now())
  type                  TransactionType
  stakeholderId         Int?
  stakeholder           Stakeholders?    @relation(fields: [stakeholderId], references: [id])
  poolId                Int?             
  pool                  Pool?            @relation(fields: [poolId], references: [id], onDelete: Cascade)
  planId                Int?             
  plan                  Plan?            @relation(fields: [planId], references: [id], onDelete: Cascade)
  amount                Int?
  expiryDate            DateTime?
  purchasePrice         Int?
  vestingType           VestingType?     @default(Time)
  startDate             DateTime?
  duration              Int?
  vestEveryDate         Int?
  cliff                 Int?
  goodLeaver            String?
  badLeaver             String?
  liquidityEvent        String?
  note                  String?
}


model Pool {
  id                    Int             @id @default(autoincrement())
  poolName              String
  date                  DateTime        @default(now())
  shareClassId          Int
  shareClass            ShareClasses    @relation(fields: [shareClassId], references: [id])
  note                  String?

  transactions Transaction[]
  plans        Plan[]
}

model Plan {
  id                    Int             @id @default(autoincrement())
  planName              String
  poolId                Int
  pool                  Pool           @relation(fields: [poolId], references: [id])
  date                  DateTime        @default(now())
  grantType             GrantType       @default(Phantom)
  note                  String? 
  
  transactions Transaction[]
}

enum TransactionType {
  Grant
  PoolCreation
  PlanCreation
  PoolIncrease
  PoolDecrease
}

enum VestingType {
  Time
  None
}

enum GrantType {
  Phantom
  StockOptions
  Warrants
  SARs
}

