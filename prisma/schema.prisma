generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Stakeholders {
  id    Int     @id @default(autoincrement())
  type  Boolean 
  name  String?
  lastName  String?
  contactEmail String  @unique
  group  String?
  address  String?
  optionalLineOfAddress  String?
  postalCode  String?
  cityName  String?
  country  String?
  identifier String?
  customIdentifier String?
  phone String?
  birthdate  String?
  nationality  String?
  civilStatus  String?
  customDetail  String?
  notes  String?

  transactions Transaction[]
}

model User {
  id            Int    @id @default(autoincrement())
  name          String?
  email         String?   @unique
  hashedPassword String?
  createdAt     DateTime @default(now())

  logRecord LogRecord[]
}
model ShareClasses {
  id                Int    @id @default(autoincrement())
  name              String
  nominalPrice      Float
  votingRights      Boolean @default(false)
  dividendRights    Boolean @default(false)
  antiDilition      String?
  taxValue          Int?
  hurdle            Int?
  issueCertificates Boolean @default(false)
  Note              String?

  pools Pool[]
  transaction Transaction[]
}

model Transaction {
  id                    Int             @id @default(autoincrement())
  date                  DateTime        @default(now())
  type                  TransactionType
  stakeholderId         Int?
  stakeholder           Stakeholders?    @relation(fields: [stakeholderId], references: [id])
  poolId                Int?             
  pool                  Pool?            @relation(fields: [poolId], references: [id], onDelete: Cascade)
  planId                Int?             
  plan                  Plan?            @relation(fields: [planId], references: [id], onDelete: Cascade)
  shareClassId          Int?
  shareClass            ShareClasses?      @relation(fields: [shareClassId], references: [id], onDelete: Cascade)
  transferPrice         Int?
  issuePrice            Int?
  totalInvestment       Int?
  retention             Int?
  totalPayment          Int?
  floor                 Int?
  cap                   Int?
  discount              Int?
  maturityDate          DateTime?
  interestStartDate     DateTime?
  nonCompounding        Int?
  amount                Int?
  expiryDate            DateTime?
  purchasePrice         Int?
  vestingType           VestingType?     @default(Time)
  startDate             DateTime?
  duration              Int?
  vestEveryDate         Int?
  cliff                 Int?
  goodLeaver            String?
  badLeaver             String?
  liquidityEvent        String?
  note                  String?

  documentId            Int?
  document              Documents?      @relation(fields: [documentId], references: [id], onDelete: Cascade)

}


model Pool {
  id                    Int             @id @default(autoincrement())
  poolName              String
  date                  DateTime        @default(now())
  shareClassId          Int
  shareClass            ShareClasses    @relation(fields: [shareClassId], references: [id])
  note                  String?
  documentId            Int?
  document              Documents?      @relation(fields: [documentId], references: [id], onDelete: Cascade)

  transactions Transaction[]
  plans        Plan[]
}

model Plan {
  id                    Int             @id @default(autoincrement())
  planName              String
  poolId                Int
  pool                  Pool           @relation(fields: [poolId], references: [id], onDelete: Cascade)
  date                  DateTime        @default(now())
  grantType             GrantType       @default(Phantom)
  note                  String? 

  documentId            Int?
  document              Documents?      @relation(fields: [documentId], references: [id], onDelete: Cascade)

  
  transactions Transaction[]
}

model Documents {
  id                    Int             @id @default(autoincrement())
  DocumentName          String
  Date                  DateTime        @default(now())

  pools Pool[]
  transactions Transaction[]
  plans Plan[]
}

model CompanyBasicInfo {
  id                    Int             @id @default(autoincrement())
  logoURL               String
  name                  String
  country               String
  currency              String
  url                   String
  showShareNumber       Boolean
  decimalVesting        Boolean
  isAnSpv               Boolean
}

model BillingInfo {
  id                      Int             @id @default(autoincrement())
  fullCompanyName         String
  billingContract         String
  billingCountry          String
  billingAddress          String
  PostalCode              String
  vatRegistirationNumber  VatType
  TaxNumber               String
}

model LogRecord {
  id                      Int             @id @default(autoincrement())
  userId                  Int
  user                    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                    LogType
  page                    LogPage
  date                    DateTime        @default(now())
}

enum LogType {
  View
  Edit
  Delete
  Create
}

enum LogPage{
  Stakeholders
  Transactions
  Captable
  ShareClasses
  Pools
  Plans
  Grants
  Documents
  Settings
  BillingInfo
  Collabarators  
}

enum VatType {
  TurkishTax
  EuropenVat
}

enum TransactionType {
  StockSplit
  ConvertibleLoan
  Secondary
  DecreaseShares
  IssueShares
  Payout
  Grant
  PoolCreation
  PlanCreation
  PoolIncrease
  PoolDecrease
}

enum VestingType {
  Time
  None
}

enum GrantType {
  Phantom
  StockOptions
  Warrants
  SARs
}

