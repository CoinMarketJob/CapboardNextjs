generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Stakeholders {
  id    Int     @id @default(autoincrement())
  type  Boolean 
  name  String?
  lastName  String?
  contactEmail String  @unique
  group  String?
  address  String?
  optionalLineOfAddress  String?
  postalCode  String?
  cityName  String?
  country  String?
  identifier String?
  customIdentifier String?
  phone String?
  birthdate  String?
  nationality  String?
  civilStatus  String?
  customDetail  String?
  notes  String?
}

model User {
  id            Int    @id @default(autoincrement())
  name          String?
  email         String?   @unique
  hashedPassword String?
  createdAt     DateTime @default(now())
}
model ShareClasses {
  id            Int    @id @default(autoincrement())
  name          String
  nominalPrice Float
  Note String?
  pools Pool[]  
}

model Pool {
  id            Int    @id @default(autoincrement())
  name          String?
  date     DateTime @default(now())
  shareClassId Int  
  shareClass ShareClasses @relation(fields: [shareClassId], references: [id]) 
  documentId Int?
  Note String?
  
  poolAmaunts PoolAmount[] 
  plans Plans[] 
}

model PoolAmount {
  id            Int    @id @default(autoincrement())
  grantsAmount Int
  amountUnit AmountUnit @default(Shares)
  date     DateTime @default(now())
  poolId Int  
  pool Pool @relation(fields: [poolId], references: [id], onDelete: Cascade) 
}

enum AmountUnit {
  Shares
  Percent
}

model Plans {
  id             Int    @id @default(autoincrement())
  planName       String
  date           DateTime @default(now())
  grantType      GrantType @default(Phantom)
  pricePerShare  Float
  vestingType    VestingType 
  startDate      DateTime? 
  duration       Int?
  vestEvery      Int?
  cliff          Int?  
  goodLeaver     String?
  badLeaver      String?
  liquidityEvent String?
  documentId    Int?
  Note          String  
  poolId         Int
  pool Pool @relation(fields: [poolId], references: [id], onDelete: Cascade) 
}

enum GrantType {
  Phantom
  Stock
  StockOptions
  Warrants
  SARs
}

enum VestingType {
  None
  Time
}